-------------------------------------------------------------------------------

                   EGCを使った16色スプライトドライバ

                       SPRITE16.COM Version 0.04
                 Copyright(C) 1996/3/14 Promisence Soft

-------------------------------------------------------------------------------

_/SPRITE16.COMとは？

  ・VRAMの下をスプライト領域として使用するＥＧＣによる１６色ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞです。
  ・初めに常駐させて他のプログラムからファンクションを呼んで実行します。
  ・３８６以上のＥＧＣ搭載の９８および互換機のＤＯＳ環境で動作します。
  ・ベクタは４２Ｈを使用しますがそれ以外を使うこともできます。

_/SPRITE16.COM の開発経緯
 「ＰromisenceＳoft」がﾊﾟｿｺﾝ通信上で流した「SKASH BoM!」や「Ｔhe Ｓtar Ｓtrik
er」などといった、一連のｼｭｰﾃｨﾝｸﾞｹﾞｰﾑはﾕｰｻﾞｰが楽しんでそれで終わり･･･の筈でし
た。ところが、作り手にとっては思いもよらぬ意外な反応が、配布先のﾕｰｻﾞｰの間で
は起こっていたのです。
「ﾊﾟｿｺﾝ通信やってる友達を通して入手したんですけど、98でｽﾌﾟﾗｲﾄをどのように？」
「隠しI/Oﾎﾟｰﾄかなんかでﾊﾟﾀｰﾝ高速転送機能でもあるんですか？」
などといった、単なる遊び手としての楽しみにとどまらず、作り手としての積極的な
挑戦を試みる方々が郵便、電話を通して大変多くの質問をいただきました。

趣味でﾌﾟﾛｸﾞﾗﾐﾝｸﾞを楽しむ日曜ﾌﾟﾛｸﾞﾗﾏｰでも、簡単に扱えるｽﾌﾟﾗｲﾄ･･･むろん、
ｹﾞｰﾑを作るのにｽﾌﾟﾗｲﾄが必要というわけでもないのですが、これが使えるか
否かで、趣味の範囲内でも、表現できる幅もぐっと広がるのではないか？ということで
「ＰromisenceＳoft」からこの度、ｽﾌﾟﾗｲﾄ常駐ﾄﾞﾗｲﾊﾞとして開発、公開されました。

当初、ﾗｲﾌﾞﾗﾘ配布･･･としての形態を構想していたのですが、256色環境(PC/AT,9821)
にも対応するべく、常駐ﾄﾞﾗｲﾊﾞという形態で公開しました。

さて、時代は Microsoft自ら徹底的に整備したGameAPIによるWin95ｹﾞｰﾑ環境が
主流になることは火を見るよりも明らかです。そして、「ＰromisenceＳoft」としても
「Ｔhe Ｓtar Ｓtriker for Win95」などのｼｭｰﾃｨﾝｸﾞの開発も進めており、完成、公開
に向けて精進しております。にもかかわらず、このような時期に DOS ﾍﾞｰｽのｹﾞｰﾑ開発
ﾄﾞﾗｲﾊﾞを公開した理由は、それなりのわけがあります。それは、現行ﾏｼﾝ上での
Direct Draw を通した画像処理性能の思ったよりも低い性能･･･です。
そして、さらに深刻な問題が、ﾕｰｻﾞｰのﾊﾟｿｺﾝ普及状況です。とあるﾈｯﾄ（ZOB-Station)
でのPromisence Soft のｻﾎﾟｰﾄﾉｰﾄで実施した保持ﾏｼﾝｱﾝｹｰﾄや、TAKERU での保有機種
ｱﾝｹｰﾄを吟味するかぎり、満足のいくｹﾞｰﾑを、Win95上でDOSと同等のQualityで仕上げ
るのには非常に困難な状況に直面していることを確認しました。ご参考までに、ZOB-
Stationは開発関係の方々が非常に多く、積極的なﾊﾟｿｺﾝﾕｰｻﾞｰが大変多い･･･にも関ら
ずです。Win95上でのｹﾞｰﾑ環境の快適さはﾋﾞﾃﾞｵﾎﾞｰﾄﾞの性能に大きく依存するわけです
が、重要なのはこれらｹﾞｰﾑ専用ﾎﾞｰﾄﾞがない状況では、ｹﾞｰﾑｱﾌﾟﾘの快適さは極端に落ちる
のにﾋﾞｼﾞﾈｽｱﾌﾟﾘはほぼ通常どおり快適に動いてしまう･･･という点です。
ﾊﾟｿｺﾝｹﾞｰﾑﾕｰｻﾞｰ層のほとんどが、仕事のついでにｹﾞｰﾑで一息入れる･･･という方々が
ほとんどなので、これらｹﾞｰﾑ専用ﾋﾞﾃﾞｵﾎﾞｰﾄﾞが「生活必需品」でないことを考慮すると、雑誌などで騒がれているほど急速な普及は少々考えられにくい状況です。
とりあえず、ｵｰﾙ１ﾊﾟｿｺﾝのような一体型ﾊﾟｿｺﾝを買えばいつの間にか高性能ﾋﾞﾃﾞｵﾎﾞｰﾄﾞ
も付いてくる･･･という状況が半年以上続くまでは「本格的な普及」と呼べないので
それまでは、「ＰromisenceＳoft」としては DOS ﾍﾞｰｽの 16,256色ｹﾞｰﾑも WIN95と
並列して公開していく予定です。

ちなみに、320*200*8Bit という画像ﾓｰﾄﾞでの DOS ﾍﾞｰｽｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞも公開予定なの
ですが、かなり高ｽﾍﾟｯｸなPCのWin95上での同画像ﾓｰﾄﾞのｽﾍﾟｯｸと比較しても、
遜色がないばかりか圧勝します。これは、実際の測定結果を元にした比較なのですが、
ここでは測定数字を羅列するよりも、ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞを通して実際に動くｹﾞｰﾑを遊んで
いただいた方が、理解しやすいと思いますので敢えて載せないことにします。

よく、広告やｶﾀﾛｸﾞなどに　秒間ｘｘｘｘﾋﾟｸｾﾙ！！なんて性能表示が出てますね。
では、次の数字は何のｽﾍﾟｯｸを意味するでしょうか？

	4 Bitｶﾗｰ 秒間 245,760 ﾋﾟｸｾﾙ合成表示可能！！

これは、何のﾏｼﾝのｽﾍﾟｯｸでしょう？
実は、ｺﾚ、1983に発売された旧ﾌｧﾐｺﾝのｽﾌﾟﾗｲﾄ機能の性能値です。
全く数字だけでは見当がつきませんね(^^)

もちろん、現在発売されているﾋﾞﾃﾞｵﾎﾞｰﾄﾞは表示方法こそ違え、上とは全く比較に
ならないｽﾍﾟｯｸを持っているわけですが、ｶﾀﾛｸﾞに載っているﾎﾟﾘｺﾞﾝ描画機能数値や
ﾋﾟｸｾﾙ数を「ｘ十万」といわれてもﾋﾟﾝ！ときません。

やはり、「どのようなｹﾞｰﾑが動いているか」にﾕｰｻﾞｰの焦点が集まります。
是非、ｻﾝﾌﾟﾙｹﾞｰﾑ「ＳtormyＳpace」を通して吟味してみてください。
なお、本ｹﾞｰﾑ（正確にはｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞ）は、御持ちのﾏｼﾝのVRAM性能に著しく
依存します。ですから、286や386ﾍﾞｰｽのﾊﾟｿｺﾝに486(50,66MHz)相当のﾁｯﾌﾟに載せ変え
ても、その効果は全く期待できませんので予めご了承ください。


_/使い方

　sprite16 -z         ････ 常駐（ディフォルトベクタ 42H 使用）
  sprite16 -r         ････ 解放

　もし他のベクタ 50H を使用する時は以下のようにします。

　sprite16 -v 50h -z  ････ 常駐（ベクタ 50H 使用）
  sprite16 -v 50h -r  ････ 解放

　常駐するとメインメモリにマスクデータ用バッファ（１６０００バイト）とベタデー
　タ用バッファ（１６０００バイト）の合計３２０００バイトのメモリを確保しコード
　を含めて約３６Ｋバイトを消費します。


_/常駐チェック方法

  ベクタ４２ｈから読み出したセグメント値：オフセット１０２Ｈのアドレスから８バ
  イト分が "SPRITE16" の文字列であれば常駐しています。文字列の次は００ｈ固定で
  す。そして００ｈの次にバージョン番号があります。バージョン１．２３ならば１０
  進数の１２３になっています。


_/ファンクションについて

　ファンクション番号はＡＨに指定し、引数は他のレジスタに格納します。
　全てのファンクションは全ての汎用レジスタを保護します。
  全てのファンクションに戻値はありません。
  内部では割込み許可になっています。

  ファンクションは、

  %ファンクション０  ＶＲＡＭ加工
  %ファンクション１  マスクデータ作成
  %ファンクション２  スプライト表示

  %ファンクション３  単色表示ＯＮ／ＯＦＦ設定
  %ファンクション４  単色表示カラー設定
  %ファンクション５  マスク(AND)処理ＯＮ／ＯＦＦ設定
  %ファンクション６  ＥＧＣ－アクセスプレーン設定
  %ファンクション７  ＥＧＣ－ＲＯＰ設定
  %ファンクション８  ＥＧＣ－ＭＡＳＫ設定

  %ファンクション９～１６	予約

  これだけあります。
  最初に一度だけ０と１のファンクションでスプライトを準備しファンクション２で
  表示します。重要なのはこの３つのファンクションだけです。
  この他にも、VRAM一括32Bit消去･･･など重要なﾌｧﾝｸｼｮﾝが必要なのですが、現時点で
  は装備されておりません。
  また、ﾗｽﾀｰｽｸﾛｰﾙ、上下反転表示、縦方向拡大、特殊ﾗｽﾀｰ加工機能･･･などが、
  ９～１６に配置される予定です。

  次にそれぞれの詳しい解説をします。
  文章中のＯＮは0以外の整数でＯＦＦは0とします。
  それとベタデータとはマスクデータを反転したデータという意味で使っています。

-------------------------------------------------------------------------------
%ファンクション０	ＶＲＡＭ加工

　プログラマ側が何らかの方法でＶＲＡＭ４００ラインに用意したグラフィックデータ
　をファンクション１のマスクデータ作成に備えて２００ライン用に加工します。加工
　内容は、まず表４００ライン分のデータを縦半分に圧縮し、それを下２００ライン分
　にコピーし、さらに裏下２００ライン分にコピーします。プログラムで裏ページを使
　わない場合はこの裏下２００ライン分にコピーする作業は無駄に終わる事になります
　が、普通は表裏ページを切り替える方法と取ると思われるので裏にもコピーしていま
　す。
　次にファンクション１でマスクデータを作成してください。

　自分でＶＲＡＭ加工するか２００ライン用に既に加工済みのグラフィックデータを直
　接ローダー等でＶＲＡＭの表下にロードした場合などはこのファンクションを使う必
　要はなくファンクション１を最初に実行してください。
　（グラフィックエディッターの都合上、400ﾗｲﾝでしか絵データを編集できない時など
　に使用します。）

-------------------------------------------------------------------------------
%ファンクション１	マスクデータ作成

　表下２００ライン分のグラフィックデータからマスクデータをメインメモリ上のバッ
　ファに取り込みます。またマスクデータを反転したベタデータもメインメモリのバッ
　ファに作成します。（実際は４ﾌﾟﾚｰﾝを全てＯＲしたベタデータが先に作成される）
　スプライト表示ファンクションを実行する前に１度実行しておいてください。

　４００ライン用のグラフィックデータを使う場合はあらかじめファンクション０で
　２００ライン用に変換したグラフィックデータを表下に作成しておいてからこのファ
　ンクションを実行してください。

-------------------------------------------------------------------------------
%ファンクション２	スプライト表示

　ファンクション１で取り込んだマスクデータとＶＲＡＭの下２００ラインにあるスプ
　ライトデータを使ってＶＲＡＭの上２００ラインに指定サイズのスプライトを表示し
　ます。このファンクション内ではＥＧＣのＯＮ、ＯＦＦはまったく行いません、その
　ため、あらかじめＥＧＣ拡張モードＯＮにしておいてから実行してください。
　（ＥＧＣのＯＮ、ＯＦＦはかなりのｵｰﾊﾞｰﾍｯﾄﾞがあるためこのような仕様にしました）

　引数は以下の通りです。

　　ＤＸ  表示Ｘ座標      （画面内：０～６３９）
　　ＢＸ  表示Ｙ座標      （画面内：０～１９９）
　　ＤＩ  転送元オフセット（０～１５９９８）
　　ＡＬ  Ｘサイズ        （１：１６ドット ２：３２ドット ３：４８ドット･･･）
　　ＣＸ  Ｙライン数      （１～２００）

  それぞれの値の正当範囲チェックは行っていません。だからもしＸサイズやライン
  数に０を指定するとＶＲＡＭが破壊されるので注意してください。

  座標はドット単位で指定します。画面では左上が（０，０）です。
  Ｘ，Ｙ座標の比は４００ラインで見るとＸ：Ｙ＝１：１ですが２００ラインで見ると
  Ｘ：Ｙ＝１：２になります。これは実行直前にＹ座標を半分にすれば２００ラインで
  もＸ：Ｙ＝１：１になります

　上下はクリッピングしているのではみ出してもかまいません。例えばスプライトの縦
　ライン数が１００でＹ座標が－６０なら４０ライン分が画面に表示されます。
  横方向はクリッピングしていません。Ｘ座標の範囲チェックは完全にプログラマ側に
  任せております。

  ＡＬに指定する値はＸドットサイズ／１６の値を指定します。
  例えば１６ドットならば１を、３２ドットならば２を指定します。

  ＣＸに指定するライン数は実際の表示ライン数を指定します。
  だから２００ラインモード時見かけ上３２ラインならその半分の１６を指定します。

  Ｃ言語であれば

  #define XSIZE16    (16/16)
  #define XSIZE32    (32/16)
  #define XSIZE64    (64/16)

  #define YSIZE16    (16/2)
  #define YSIZE32    (32/2)
  #define YSIZE64    (64/2)

  こんな風にテキスト定義しておくと分かりやすいと思います。

  ＤＩには転送元スプライトパターンを指定します。
  ＶＲＡＭ下２００ラインに格納されているスプライトの左上のオフセットを指定する
  のですがこの時、重要なのが転送元オフセットは必ず偶数アドレスから始まらなけれ
  ばならないということです。予めスプライトパターンの横の配置を１６ドット単位に
  しておけば問題ありません。
　任意のオフセットを指定可能なので、前景物から徐々に姿を表す･･･といった
　場面でも無理なく表現できます。

　（なお、この転送元スプライト設定方法は、98VRAMの構成に影響を受けておりますが
　256色版ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞでも、このﾌｧﾝｸｼｮﾝをｻﾎﾟｰﾄします）

-------------------------------------------------------------------------------
%ファンクション３	単色表示ＯＮ／ＯＦＦ設定

  ディフォルトはＯＦＦですがＤＸに１を指定してコールすると単色表示モードＯＮに
  なり、次のスプライト表示からスプライトが１色で表示されるようになります。
  この１色（パレット番号）はファンクション４で設定できます。

  単色表示ではマスクを行う必要がないため通常よりかなり高速です。
  （高速化度は機種依存）

-------------------------------------------------------------------------------
%ファンクション４	単色表示カラー設定

  このファンクションで指定した色番号がスプライト単色表示の色に使用されます。

  設定方法はＤＸにパレット番号０～１５を入れて実行します。
  ディフォルトはパレット番号１５に設定しています。
  256色版ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞでは、ﾊﾟﾚｯﾄ番号は０～２５５が有効になります。

-------------------------------------------------------------------------------
%ファンクション５	マスク(AND)処理ＯＮ／ＯＦＦ設定

  通常スプライト表示ではマスク（ＡＮＤ）処理をしてからＯＲ転送しますが
  ＯＦＦにすると、マスク処理を省略します。

  ディフォルトはＯＮです。
  単色描画モードＯＮの時はマスクする必要が無いので強制的にマスクは省略されます
  引数はＤＸに指定します。

-------------------------------------------------------------------------------
%ファンクション６	ＥＧＣ－アクセスプレーン設定

  スプライト表示時にＥＧＣの０４Ａ０ｈに出力するアクセスプレーンの設定です。
  ディフォルトは４プレーン同時アクセスのＦＦＦ０ｈです。
  引数はＤＸに指定します。
　なお、256色ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞではこのﾌｧﾝｸｼｮﾝは未定義になります。

-------------------------------------------------------------------------------
%ファンクション７	ＥＧＣ－ＲＯＰ設定

  通常スプライト表示時にＥＧＣの０４Ａ４ｈに出力するＲＯＰの設定です。
  ディフォルトは２８ＦＣｈ（ＶＲＡＭ間ＯＲ転送）になっています。
  引数はＤＸに指定します。
　なお、256色ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞではこのﾌｧﾝｸｼｮﾝは未定義になります。

-------------------------------------------------------------------------------
%ファンクション８	ＥＧＣ－ＭＡＳＫ設定

  スプライト表示時にＥＧＣの０４Ａ８ｈに出力するマスク値の設定です。
  ディフォルトはＦＦＦＦｈですがＡＡＡＡｈに変更すると薄暗い感じで表示されます
  引数はＤＸに指定します。
  256色ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞでもMASK機能としてはｻﾎﾟｰﾄされます。

-------------------------------------------------------------------------------


以上、現ﾊﾞｰｼﾞｮﾝのｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞの機能紹介でした。
この他にも、上下反転表示、縦方向拡大、特殊ﾗｽﾀｰ加工機能･･･などの機能を
盛り込み、Ｃで手軽に使用可能になるべくﾍｯﾀﾞﾌｧｲﾙの添付、ｻﾝﾌﾟﾙｿｰｽ、および
最適化済みｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞ全ｿｰｽのセットを「最光速ｽﾌﾟﾗｲﾄﾄﾞﾗｲﾊﾞ for 16Color」として
ｼｪｱｳｪｱ公開する予定です。

何か問題点、疑問点などがございましたら御連絡ください。


_/著作権など

当スプライトドライバおよび付属サンプルゲーム「ＳtormyＳpace」の
著作権は「ＰromisenceＳoft」にあります。
他人への譲渡、コピーは自由ですが、他ネットへの転載は事後でもよろしい
ので御報告お願いします。


                                      池田  晃（A.Ikeda）
                                      Ｎｉｆｔｙ    ＭＨＦ０３５５３
                                      ＰＣ－ＶＡＮ  ＬＲＤ１６８９８

                                      葛目元公（Mocky）
                                      Ｎｉｆｔｙ    ＰＸＭ０５３７０
                                      東京ＢＢＳ    ＭＯＴＯＫＩＭＩ
                                      ＺＯＢ        ＺＯＢ１５２００

                                      EXJ_Z
                                      ＺＯＢ        ＺＯＢ１８２４５
